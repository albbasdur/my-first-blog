
PATH=C:\Python27\;C:\Python27\Scripts;C:\Program Files (x86)\Common Files\Oracle\Java\javapath;C:\Program Files (x86)\Intel\Intel(R) Management Engine Components\iCLS\;C:\Program Files\Intel\Intel(R) Management Engine Components\iCLS\;C:\WINDOWS\system32;C:\WINDOWS;C:\WINDOWS\System32\Wbem;C:\WINDOWS\System32\WindowsPowerShell\v1.0\;C:\Program Files (x86)\Intel\Intel(R) Management Engine Components\DAL;C:\Program Files\Intel\Intel(R) Management Engine Components\DAL;C:\Program Files (x86)\Intel\Intel(R) Management Engine Components\IPT;C:\Program Files\Intel\Intel(R) Management Engine Components\IPT;C:\WINDOWS\System32\OpenSSH\;C:\Program Files\nodejs\;C:\Program Files\Git\cmd;C:\Program Files\Geth;C:\Program Files\Java\jdk-12.0.1\bin;C:\Program Files\PuTTY\;C:\Program Files\AutoFirma\AutoFirma;C:\Gradle\gradle-6.1.1;C:\Users\Cheeko\AppData\Local\Programs\Python\Python38\Scripts\;C:\Users\Cheeko\AppData\Local\Programs\Python\Python38\;C:\Users\Cheeko\.windows-build-tools\python27\;C:\Program Files\nodejs\node_modules\npm\node_modules\npm-lifecycle\node-gyp-bin;C:\Users\Cheeko\AppData\Roaming\npm\node_modules\windows-build-tools\node_modules\.bin;C:\Users\Cheeko\AppData\Roaming\npm\node_modules\.bin;C:\Users\Cheeko\AppData\Local\Programs\Python\Python37\Scripts\;C:\Users\Cheeko\AppData\Local\Programs\Python\Python37\;C:\Users\Cheeko\AppData\Local\Microsoft\WindowsApps;C:\Users\Cheeko\AppData\Local\Programs\Microsoft VS Code\bin;C:\Users\Cheeko\AppData\Roaming\npm;C:\Users\Cheeko\AppData\Local\Microsoft\WindowsApps;C:\Users\Cheeko\AppData\Local\Programs\ipfs-desktop\resources\app.asar.unpacked\out\ipfs-on-path\scripts\bin-win



https://tutorial.djangogirls.org/es

urlresolver de Imagina a un cartero llevando una carta. Él está caminando por la calle y comprueba cada número de casa con el que está en la carta. Si coincide, deja la carta allí. Así es como funciona el urlresolver!

view (vista)


Set-ExecutionPolicy -ExecutionPolicy RemoteSigned
   Execution Policy Change

C:\djangogirls>python -m venv myvenv
C:\djangogirls>myvenv\Scripts\activate // En VS Code: $ . myvenv\Scripts\activate.ps1
$ source myvenv/bin/activate --> en Mac OS / Linux

(myvenv) C:\djangogirls> python -m pip install --upgrade pip

Crear fichero requirements.txt (Solo con la línea: "Django~=2.2.4" sin comillas)

(myvenv) C:\djangogirls> pip install -r requirements.txt

PythonAnywhere API Token: Login to see it! :)

Create project: Windows
En Windows debes ejecutar el siguiente comando. (No olvides incluir el punto . al final):

(myvenv) C:\djangogirls> django-admin.exe startproject mysite .

(myvenv) C:\djangogirls> python manage.py migrate 		--> Para crear una base de datos

(myvenv) C:\djangogirls> python manage.py runserver		--> Iniciar el servidor
(myvenv) C:\djangogirls> python manage.py runserver		--> Si da error en Windows: (myvenv) C:\djangogirls> python manage.py runserver 0:8000


Un modelo en Django es un tipo especial de objeto que se guarda en la base de datos
Crear una aplicación

(myvenv) C:\djangogirls> python manage.py startapp blog
	mysite/settings.py

Crear el modelo del Post
Crear tablas para los modelos en tu base de datos
	Modify blog/models.py
	
(myvenv) C:\djangogirls> python manage.py makemigrations blog

(myvenv) C:\djangogirls> python manage.py migrate blog

Administrador de Django
	blog/admin.py
	
	
http://127.0.0.1:8000/admin/
	
python manage.py createsuperuser










